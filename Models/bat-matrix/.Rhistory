N_pop_ts[,1] <- M_pop # by age class
stab.struct <- get.age.struct.M(M_pop, c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion", type="b")
# print("start ts")
#iterate SIR such that this gets transitioned each timestep. And change the births as you go
for (i in 1:(length(times)-1)){
#build matrices anew each time because foi depends on # infected
#calculate biweek from timestep here:
biwk1 <- find.biweek(t=i, times=times)
#  print(i)
Tmat <- buildTMat_MSIRN_age(c=c, Npop= N_pop_ts[,i], age.classes=1:s, age.brk = age.brk, surv.biwk = (1-mort)^(1/ntyr), surv.juv.biwk = (1-mort_juv)^(1/ntyr), mu.sick=mu.sick, rho=rho,	beta=beta, sigma=sigma, recov=recov, wane= wane, add.inf.mort=add.inf.mort, age.rate=1/ntyr, slope.wane=slope.wane)
#Tmat <- buildTMat_MSIRN_age_seas(biwk=biwk1, c=c, Npop= N_pop_ts[,i], age.classes=1:s, age.brk = age.brk, surv.biwk = (1-mort)^(1/ntyr), surv.juv.biwk = (1-mort_juv)^(1/ntyr), mu.sick=mu.sick, boost=boost,	beta=beta, sigma=sigma, recov=recov, wane= wane, add.inf.mort=add.inf.mort, age.rate=1/ntyr, slope.wane=slope.wane)
# print(i)
# print(biwk1)
#feed into fertility matrix since births are dependent on biwk
Fmat <- buildFMatrix_MSIRN(age.classes=1:s, adult_fec =adult_fec, surv.biwk = (1-mort)^(1/ntyr), biwk = biwk1, N_stat = N_stat)
#make trans mat
transMat <- Tmat + Fmat
#move forward in time
nt1<-(transMat) %*% N_pop_ts[,i]
N_pop_ts[,i+1] <- nt1
}
stab.struct <- get.age.struct.M(pop=N_pop_ts[,ncol(N_pop_ts)], c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion", type="b")
#transform whole vector to be split by class instead of age
N_pop_ts <- transform.vect(vec=N_pop_ts, s=s, c=c)
N_split_1 = mat_split(N_pop_ts, r=s, c=ncol(N_pop_ts))
#transform array into list
N_split = list()
for (i in 1:dim(N_split_1)[3]){
N_split[[i]] = N_split_1[,,i]
}
#now you have a list of state variables.
#then take column sums of each and plot the class totals over time - note that there are 26 steps per year
N_total = lapply(X=N_split, FUN=colSums)
#plot both by age and total
#times=seq(0,yrs,by =1/ntyr)
dat.tot = cbind.data.frame(times,N_total)
names(dat.tot) = c("time", "M", "S", "I", "R", "N")
dat.tot$tot_pop = rowSums((dat.tot[,2:ncol(dat.tot)]))
dat.long <- melt(dat.tot, measure.vars = c("M", "S", "I", "R", "N", "tot_pop"), variable.name = "state", value.name = "count")
dat.sub = subset(dat.long, state!="tot_pop")
dat.pop = subset(dat.long, state=="tot_pop")
dat.pop <- dplyr::select(dat.pop, -(state))
names(dat.pop)[names(dat.pop)=="count"] <- "tot_pop"
dat.out <- merge(dat.sub, dat.pop, by ="time", all.x = T, sort = F)
head(dat.out)
dat.out$proportion <- dat.out$count/dat.out$tot_pop
dat.out$state = factor(dat.out$state, levels=c("M", "S", "I", "R", "N"))
#and remove burnin:
dat.out = subset(dat.out, time >= burnin)
#return this sim
return(dat.out)
}
sim.met.MSIR.age.vax <- function(burnin, sim_pop, yrs, ntyr, age.brk, s, beta, recov, mort, mort_juv, adult_fec, model1,
wane, slope.wane, sigma, mu.sick, add.inf.mort, vacc.biwk, prop.vacc, year.vacc){
c=4
#then run model for 100 years
#can take more timesteps than the data
times <-   seq(0, yrs, by =1/ntyr) # then, subtract last few biweeks so you end before the last birthpulse starts.
#means ctting last 4 biweeks
#times <- times[1:(length(times)-4)]
#first, we take our juvenile and adult survival rates and use them to get the stable age structure
mat1 = build.pop.mat(surv=(1-mort), surv_juv=(1-mort_juv), s=(s), adult_fec = adult_fec)
stab.struct = Re(eigen(mat1)$vector[,1])
stab.struct <- stab.struct/sum(stab.struct)
# plot(stab.struct, xlab="Age", ylab="Proportion")
#out of curiosity...
lambda = round(max(Re(eigen(mat1)$value)), 8)
#print(paste0("lambda = ", lambda)) #we need the pop to replace itself or grow slightly - must be 1 or greater
#then, we use this stable age structure to make a bat population
#gives counts of bats per age year
bat.mat = stab.struct*sim_pop
#introduce a few infecteds and run it out to equilibrium before you grab the data
R_init = rep(0, s)
I_init = rep(0, s); I_init[3] = 5 #comment out if you just want to check demography
M_init = rep(0, s)
S_init = bat.mat - I_init
N_tot = cbind(M_init, S_init, I_init, R_init)
N_pop = vec(N_tot) #by disease status
M_pop = vec(t(N_tot)) #by age class
#make matrix to store your population as you go
N_pop_ts <- matrix(NA, ncol = length(times), nrow(N_pop))
N_pop_ts[,1] <- M_pop # by age class
stab.struct <- get.age.struct.M(M_pop, c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion")
#print("start ts")
#iterate SIR such that this gets transitioned each timestep. And change the births as you go
for (i in 1:(length(times)-1)){
#build matrices anew each time because foi depends on # infected
#print(i)
Tmat <- buildTMat_age(c=c, Npop= N_pop_ts[,i], age.classes=1:s, age.brk=age.brk, surv.biwk = (1-mort)^(1/ntyr), surv.juv.biwk = (1-mort_juv)^(1/ntyr), mu.sick=mu.sick,	beta=beta, sigma=sigma, recov=recov,  wane= wane, add.inf.mort=add.inf.mort, age.rate=1/ntyr, slope.wane=slope.wane)
#print(i)
#calculate biweek from timestep here:
biwk1 <- find.biweek(t=i, times=times)
#print(biwk1)
#feed biweek into fertility matrix: since births only happen during certain times of the year
Fmat <- buildFMatrix(age.classes=1:s, adult_fec =adult_fec, surv.biwk = (1-mort)^(1/ntyr), biwk = biwk1)
#make trans mat
transMat <- Tmat + Fmat
#move forward in time
nt1<-(transMat) %*% N_pop_ts[,i]
#then, add in vaccination event, depending on the biweek of the year
if (sum(biwk1==vacc.biwk)>0 & floor(times[i])==year.vacc){
#pop vector right now is organized by age class: M-1,S-1,I-1,R-1,M-2,S-2, etc.
#move to by disease status
#transform whole vector to be split by class instead of age
nt1_disease <- transform.vect(vec=nt1, s=s, c=c)
#now, move a proportion of the S class individuals to the R class for vaccination
S.move <- nt1_disease[(s+1):(s+s)]*prop.vacc
#take them out of S
nt1_disease[(s+1):(s+s)] <- (nt1_disease[(s+1):(s+s)]-S.move)
#put them in R
nt1_disease[(3*s+1):(3*s+s)] <- nt1_disease[(3*s+1):(3*s+s)] + S.move
#and transform back
nt1 <- transform.vect(vec=nt1_disease, s=c, c=s)
}
#fill in matrix
N_pop_ts[,i+1] <- nt1
}
stab.struct <- get.age.struct.M(pop=N_pop_ts[,ncol(N_pop_ts)], c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion")
#transform whole vector to be split by class instead of age
N_pop_ts <- transform.vect(vec=N_pop_ts, s=20, c=4)
N_split_1 = mat_split(N_pop_ts, r=s, c=ncol(N_pop_ts))
#transform array into list
N_split = list()
for (i in 1:dim(N_split_1)[3]){
N_split[[i]] = N_split_1[,,i]
}
#now you have a list of state variables.
#then take column sums of each and plot the class totals over time - note that there are 26 steps per year
N_total = lapply(X=N_split, FUN=colSums)
#plot both by age and total
#times=seq(0,yrs,by =1/ntyr)
dat.tot = cbind.data.frame(times,N_total)
names(dat.tot) = c("time", "M", "S", "I", "R")
dat.tot$N = rowSums((dat.tot[,2:ncol(dat.tot)]))
names(dat.tot)[names(dat.tot)=="N"] <- "tot_pop"
dat.long <- melt(dat.tot, measure.vars = c("M", "S", "I", "R", "tot_pop"), variable.name = "state", value.name = "count")
dat.sub = subset(dat.long, state!="tot_pop")
dat.pop = subset(dat.long, state=="tot_pop")
dat.pop <- dplyr::select(dat.pop, -(state))
names(dat.pop)[names(dat.pop)=="count"] <- "tot_pop"
dat.out <- merge(dat.sub, dat.pop, by ="time", all.x = T, sort = F)
head(dat.out)
dat.out$proportion <- dat.out$count/dat.out$tot_pop
dat.out$state = factor(dat.out$state, levels=c("M", "S", "I", "R"))
#and remove burnin:
dat.out = subset(dat.out, time >= burnin)
dat.out$model = model1
dat.out$prop_vacc = prop.vacc
if(length(vacc.biwk)==1){
dat.out$biwk_vacc = vacc.biwk
}else{
dat.out$biwk_vacc = paste(vacc.biwk, collapse = ", ")
}
#return this sim
return(dat.out)
}
sim.met.MSIRN.age.vax <- function(burnin, sim_pop, yrs, ntyr,  s, beta, age.brk, recov, mort, mort_juv, adult_fec, wane, rho, model1,
slope.wane, sigma, mu.sick, add.inf.mort, N_stat, vacc.biwk, prop.vacc, year.vacc){
#first pull out your data...
c=5
# dat.tmp <- subset(dat.age1, species==species1 & type==type1)
#then run model for 100 years
#can take more timesteps than the data
times <-   seq(0, yrs, by =1/ntyr) # then, subtract last few biweeks so you end before the last birthpulse starts.
#means ctting last 4 biweeks
#times <- times[1:(length(times)-4)]
#first, we take our juvenile and adult survival rates and use them to get the stable age structure
mat1 = build.pop.mat(surv=(1-mort), surv_juv=(1-mort_juv), s=(s), adult_fec = adult_fec)
stab.struct = Re(eigen(mat1)$vector[,1])
stab.struct <- stab.struct/sum(stab.struct)
#plot(stab.struct, xlab="Age", ylab="Proportion", type="b")
#out of curiosity...
lambda = round(max(Re(eigen(mat1)$value)), 8)
#print(paste0("lambda = ", lambda)) #we need the pop to replace itself or grow slightly - must be 1 or greater
#then, we use this stable age structure to make a bat population
#gives counts of bats per age year
bat.mat = stab.struct*sim_pop
#introduce a few infecteds and run it out to equilibrium before you grab the data
R_init = rep(0, s)
I_init = rep(0, s); I_init[3] = 5 #comment out if you just want to check demography
M_init = rep(0, s)
N_init = rep(0, s)
S_init = bat.mat - I_init
N_tot = cbind(M_init, S_init, I_init, R_init, N_init)
N_pop = vec(N_tot) #by disease status
M_pop = vec(t(N_tot)) #by age class
#make matrix to store your population as you go
N_pop_ts <- matrix(NA, ncol = length(times), nrow(N_pop))
N_pop_ts[,1] <- M_pop # by age class
stab.struct <- get.age.struct.M(M_pop, c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion", type="b")
# print("start ts")
#iterate SIR such that this gets transitioned each timestep. And change the births as you go
for (i in 1:(length(times)-1)){
#build matrices anew each time because foi depends on # infected
#calculate biweek from timestep here:
biwk1 <- find.biweek(t=i, times=times)
#  print(i)
Tmat <- buildTMat_MSIRN_age(c=c, Npop= N_pop_ts[,i], age.classes=1:s, age.brk = age.brk, surv.biwk = (1-mort)^(1/ntyr), surv.juv.biwk = (1-mort_juv)^(1/ntyr), mu.sick=mu.sick, rho=rho,	beta=beta, sigma=sigma, recov=recov, wane= wane, add.inf.mort=add.inf.mort, age.rate=1/ntyr, slope.wane=slope.wane)
#Tmat <- buildTMat_MSIRN_age_seas(biwk=biwk1, c=c, Npop= N_pop_ts[,i], age.classes=1:s, age.brk = age.brk, surv.biwk = (1-mort)^(1/ntyr), surv.juv.biwk = (1-mort_juv)^(1/ntyr), mu.sick=mu.sick, boost=boost,	beta=beta, sigma=sigma, recov=recov, wane= wane, add.inf.mort=add.inf.mort, age.rate=1/ntyr, slope.wane=slope.wane)
# print(i)
# print(biwk1)
#feed into fertility matrix since births are dependent on biwk
Fmat <- buildFMatrix_MSIRN(age.classes=1:s, adult_fec =adult_fec, surv.biwk = (1-mort)^(1/ntyr), biwk = biwk1, N_stat = N_stat)
#make trans mat
transMat <- Tmat + Fmat
#move forward in time
nt1<-(transMat) %*% N_pop_ts[,i]
#then, add in vaccination event, depending on the biweek of the year
if (sum(biwk1==vacc.biwk)>0 & floor(times[i])==year.vacc){
#pop vector right now is organized by age class: M-1,S-1,I-1,R-1,M-2,S-2, etc.
#move to by disease status
#transform whole vector to be split by class instead of age
nt1_disease <- transform.vect(vec=nt1, s=s, c=c)
#now, move a proportion of the S class individuals to the R class for vaccination
S.move <- nt1_disease[(s+1):(s+s)]*prop.vacc
#take them out of S
nt1_disease[(s+1):(s+s)] <- (nt1_disease[(s+1):(s+s)]-S.move)
#put them in R
nt1_disease[(3*s+1):(3*s+s)] <- nt1_disease[(3*s+1):(3*s+s)] + S.move
#and transform back
nt1 <- transform.vect(vec=nt1_disease, s=c, c=s)
}
#fill in matrix
N_pop_ts[,i+1] <- nt1
}
stab.struct <- get.age.struct.M(pop=N_pop_ts[,ncol(N_pop_ts)], c=c)
stab.struct <- c(unlist(stab.struct))
stab.struct <- stab.struct/(sum(stab.struct))
#plot(stab.struct, xlab="Age", ylab="Proportion", type="b")
#transform whole vector to be split by class instead of age
N_pop_ts <- transform.vect(vec=N_pop_ts, s=s, c=c)
N_split_1 = mat_split(N_pop_ts, r=s, c=ncol(N_pop_ts))
#transform array into list
N_split = list()
for (i in 1:dim(N_split_1)[3]){
N_split[[i]] = N_split_1[,,i]
}
#now you have a list of state variables.
#then take column sums of each and plot the class totals over time - note that there are 26 steps per year
N_total = lapply(X=N_split, FUN=colSums)
#plot both by age and total
#times=seq(0,yrs,by =1/ntyr)
dat.tot = cbind.data.frame(times,N_total)
names(dat.tot) = c("time", "M", "S", "I", "R", "N")
dat.tot$tot_pop = rowSums((dat.tot[,2:ncol(dat.tot)]))
dat.long <- melt(dat.tot, measure.vars = c("M", "S", "I", "R", "N", "tot_pop"), variable.name = "state", value.name = "count")
dat.sub = subset(dat.long, state!="tot_pop")
dat.pop = subset(dat.long, state=="tot_pop")
dat.pop <- dplyr::select(dat.pop, -(state))
names(dat.pop)[names(dat.pop)=="count"] <- "tot_pop"
dat.out <- merge(dat.sub, dat.pop, by ="time", all.x = T, sort = F)
head(dat.out)
dat.out$proportion <- dat.out$count/dat.out$tot_pop
dat.out$state = factor(dat.out$state, levels=c("M", "S", "I", "R", "N"))
#and remove burnin:
dat.out = subset(dat.out, time >= burnin)
dat.out$model = model1
dat.out$prop_vacc = prop.vacc
if(length(vacc.biwk)==1){
dat.out$biwk_vacc = vacc.biwk
}else{
dat.out$biwk_vacc = paste(vacc.biwk, collapse = ", ")
}
#return this sim
return(dat.out)
}
#births happen in biweeks 1-4, 24-26
#let's have vaccination happen after waning maternal immunity
#(this optimal timing is something we will eventually test)
#... so, after 4 months, or 8 biweeks, so around round biweek 12
#start with just one campaign
run.MSIRS <- sim.met.MSIR.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 1.57911,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=1.08806987767265, #(3^(1/26))
slope.wane=1,
sigma=0.0222735363575397,
mu.sick = 1,
add.inf.mort = FALSE,
model1 = "MSIRS",
vacc.biwk = 12,
prop.vacc = 0,#proportion of S class vaccinated, eventually can think about "wasted" vaccines on those already exposed
year.vacc= 33)
run.MSIRN <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho=0, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRN",
vacc.biwk = 12,
prop.vacc = 0,
year.vacc= 33)
run.MSIRNI <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho= 1/24, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRNI",
vacc.biwk = 12,
prop.vacc = 0,
year.vacc= 33)
#and with vaccines
run.MSIRS.1 <- sim.met.MSIR.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 1.57911,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=1.08806987767265, #(3^(1/26))
slope.wane=1,
sigma=0.0222735363575397,
mu.sick = 1,
add.inf.mort = FALSE,
model1 = "MSIRS",
vacc.biwk = 12,
prop.vacc = .5,#proportion of S class vaccinated, eventually can think about "wasted" vaccines on those already exposed
year.vacc= 33)
run.MSIRS.1$n_campaigns=1
run.MSIRN.1 <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho=0, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRN",
vacc.biwk = 12,
prop.vacc = .75,
year.vacc= 33)
run.MSIRN.1$n_campaigns = 1
run.MSIRNI.1 <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho= 1/24, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRNI",
vacc.biwk = 12,
prop.vacc = .5,
year.vacc= 33)
run.MSIRNI.1$n_campaigns=1
run.MSIRS.2 <- sim.met.MSIR.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 1.57911,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=1.08806987767265, #(3^(1/26))
slope.wane=1,
sigma=0.0222735363575397,
mu.sick = 1,
add.inf.mort = FALSE,
model1 = "MSIRS",
vacc.biwk = c(12, 20),
prop.vacc = .5,#proportion of S class vaccinated, eventually can think about "wasted" vaccines on those already exposed
year.vacc= 33)
run.MSIRS.2$n_campaigns=2
run.MSIRN.2 <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho=0, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRN",
vacc.biwk = c(12, 20),
prop.vacc = .75,
year.vacc= 33)
run.MSIRN.2$n_campaigns = 2
run.MSIRNI.2 <- sim.met.MSIRN.age.vax(burnin=30,
sim_pop=10000,
yrs=50,
ntyr=26,
s=20,
beta = 2.203968,
age.brk = 20,
recov=1,
mort=.207,
mort_juv=0.456,
adult_fec=.48,
wane=0.0850142487956748,
slope.wane=1,
sigma=0.00748049787194744,
rho= 1/24, #this is new from the paper, allows for N-class individuals to wane back to I (not S) so represents a persistent infection. in the future, could have this occur only seasonally
mu.sick = 1,
add.inf.mort = FALSE,
N_stat="matAB",
model1 = "MSIRNI",
vacc.biwk = c(12, 20),
prop.vacc = .5,
year.vacc= 33)
run.MSIRNI.2$n_campaigns=2
run.MSIRN$n_campaigns <- 0
all.runs <-rbind(run.MSIRN, run.MSIRN.1, run.MSIRN.2)
all.runs$model <- factor(all.runs$model, levels = c("MSIRN"))
all.runs$campaign_type[all.runs$prop_vacc==0] <- "no vaccination"
all.runs$campaign_type[all.runs$prop_vacc==0.75 & all.runs$n_campaigns==1] <- "1 campaign:\n75% vaccination"
all.runs$campaign_type[all.runs$prop_vacc==0.75 & all.runs$n_campaigns==2] <- "2 campaigns:\n75% vaccination"
all.runs$campaign_type <- factor(all.runs$campaign_type, levels = c("no vaccination", "1 campaign:\n75% vaccination", "2 campaigns:\n75% vaccination"))
save(all.runs, file = "simple.vax.sim.Rdata")
colz = c('M'="violet", 'S' = "mediumseagreen", 'I' = 'tomato', 'R' = "cornflowerblue", 'N' = "navy")
vax.event = cbind.data.frame(time=c((33 + 12/26),(33 + 12/26), (33+20/26)),
campaign_type=c("1 campaign:\n75% vaccination", "2 campaigns:\n75% vaccination", "2 campaigns:\n75% vaccination"))
vax.event$campaign_type = factor(vax.event$campaign_type, levels = c("no vaccination", "1 campaign:\n75% vaccination", "2 campaigns:\n75% vaccination"))
p1 <- ggplot(data=all.runs) + geom_line(aes(x=time, y=proportion, color=state)) +
theme_bw() + theme(panel.grid = element_blank(), strip.background = element_rect(fill="white"),
legend.direction = "horizontal", legend.title = element_blank(), legend.background = element_blank(),
legend.position = c(.16,.95), legend.text = element_text(size=7),
axis.title = element_text(size=18), axis.text = element_text(size=14), strip.text = element_text(size=18)) +
scale_color_manual(values=colz) + scale_x_continuous(breaks=seq(30,50,5), labels=c(0:4)) +
geom_vline(data=vax.event, aes(xintercept=time), linetype=2) +
facet_grid(model~campaign_type) + xlab("year of monitoring")
ggsave(file = "BatVaccineComp.png",
plot=p1,
units="mm",
width=70,
height=30,
scale=3,
dpi=300)
